# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# Type Definitions
type StudentExamRecord @model{
  UMBCID: ID!
  studentName: String!
  barcode: String!
  grade: String
}

# Specific type definitions for different table views
type StudentIDName @model {
  UMBCID: ID!
  studentName: String!
}

type Barcode @model{
  UMBCID: ID!
  barcode: String!
}

type Grade @model{
  UMBCID: ID!
  barcode: String!
  grade: String
}

input CreateStudentExamRecordInput {
  UMBCID: ID!
  studentName: String!
  barcode: String!
  grade: String
}

input UpdateStudentExamRecordInput {
  UMBCID: ID!
  studentName: String
  barcode: String
  grade: String
}

input CreateStudentIDName {
  UMBCID: ID!
  studentName: String!
}

input UpdateStudentIDName {
  UMBCID: ID!
  studentName: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelStudentExamRecordConnection {
  items: [StudentExamRecord]!
  nextToken: String
}

input ModelStudentExamRecordFilterInput {
  UMBCID: ModelIDInput
  studentName: ModelStringInput
  barcode: ModelStringInput
  grade: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelStudentExamRecordFilterInput]
  or: [ModelStudentExamRecordFilterInput]
  not: ModelStudentExamRecordFilterInput
}

type Query {
  getStudentExamRecord(id: ID!): StudentExamRecord
  listStudentExamRecords(filter: ModelStudentExamRecordFilterInput, limit: Int, nextToken: String): ModelStudentExamRecordConnection
  getStudentIDName(id: ID!): StudentIDName
  listStudentIDNames(filter: ModelStudentIDNameFilterInput, limit: Int, nextToken: String): ModelStudentIDNameConnection
  getBarcode(id: ID!): Barcode
  listBarcodes(filter: ModelBarcodeFilterInput, limit: Int, nextToken: String): ModelBarcodeConnection
  getGrade(id: ID!): Grade
  listGrades(filter: ModelGradeFilterInput, limit: Int, nextToken: String): ModelGradeConnection
}

input ModelStudentExamRecordConditionInput {
  UMBCID: ModelIDInput
  studentName: ModelStringInput
  barcode: ModelStringInput
  grade: ModelStringInput
  and: [ModelStudentExamRecordConditionInput]
  or: [ModelStudentExamRecordConditionInput]
  not: ModelStudentExamRecordConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input DeleteStudentExamRecordInput {
  id: ID!
}

type Mutation {
  createStudentExamRecord(input: CreateStudentExamRecordInput!, condition: ModelStudentExamRecordConditionInput): StudentExamRecord
  updateStudentExamRecord(input: UpdateStudentExamRecordInput!, condition: ModelStudentExamRecordConditionInput): StudentExamRecord
  deleteStudentExamRecord(input: DeleteStudentExamRecordInput!, condition: ModelStudentExamRecordConditionInput): StudentExamRecord
  createStudentIDName(input: CreateStudentIDNameInput!, condition: ModelStudentIDNameConditionInput): StudentIDName
  updateStudentIDName(input: UpdateStudentIDNameInput!, condition: ModelStudentIDNameConditionInput): StudentIDName
  deleteStudentIDName(input: DeleteStudentIDNameInput!, condition: ModelStudentIDNameConditionInput): StudentIDName
  createBarcode(input: CreateBarcodeInput!, condition: ModelBarcodeConditionInput): Barcode
  updateBarcode(input: UpdateBarcodeInput!, condition: ModelBarcodeConditionInput): Barcode
  deleteBarcode(input: DeleteBarcodeInput!, condition: ModelBarcodeConditionInput): Barcode
  createGrade(input: CreateGradeInput!, condition: ModelGradeConditionInput): Grade
  updateGrade(input: UpdateGradeInput!, condition: ModelGradeConditionInput): Grade
  deleteGrade(input: DeleteGradeInput!, condition: ModelGradeConditionInput): Grade
}

input ModelSubscriptionStudentExamRecordFilterInput {
  UMBCID: ModelSubscriptionIDInput
  studentName: ModelSubscriptionStringInput
  barcode: ModelSubscriptionStringInput
  grade: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionStudentExamRecordFilterInput]
  or: [ModelSubscriptionStudentExamRecordFilterInput]
}

type Subscription {
  onCreateStudentExamRecord(filter: ModelSubscriptionStudentExamRecordFilterInput): StudentExamRecord @aws_subscribe(mutations: ["createStudentExamRecord"])
  onUpdateStudentExamRecord(filter: ModelSubscriptionStudentExamRecordFilterInput): StudentExamRecord @aws_subscribe(mutations: ["updateStudentExamRecord"])
  onDeleteStudentExamRecord(filter: ModelSubscriptionStudentExamRecordFilterInput): StudentExamRecord @aws_subscribe(mutations: ["deleteStudentExamRecord"])
  onCreateStudentIDName(filter: ModelSubscriptionStudentIDNameFilterInput): StudentIDName @aws_subscribe(mutations: ["createStudentIDName"])
  onUpdateStudentIDName(filter: ModelSubscriptionStudentIDNameFilterInput): StudentIDName @aws_subscribe(mutations: ["updateStudentIDName"])
  onDeleteStudentIDName(filter: ModelSubscriptionStudentIDNameFilterInput): StudentIDName @aws_subscribe(mutations: ["deleteStudentIDName"])
  onCreateBarcode(filter: ModelSubscriptionBarcodeFilterInput): Barcode @aws_subscribe(mutations: ["createBarcode"])
  onUpdateBarcode(filter: ModelSubscriptionBarcodeFilterInput): Barcode @aws_subscribe(mutations: ["updateBarcode"])
  onDeleteBarcode(filter: ModelSubscriptionBarcodeFilterInput): Barcode @aws_subscribe(mutations: ["deleteBarcode"])
  onCreateGrade(filter: ModelSubscriptionGradeFilterInput): Grade @aws_subscribe(mutations: ["createGrade"])
  onUpdateGrade(filter: ModelSubscriptionGradeFilterInput): Grade @aws_subscribe(mutations: ["updateGrade"])
  onDeleteGrade(filter: ModelSubscriptionGradeFilterInput): Grade @aws_subscribe(mutations: ["deleteGrade"])
}

type ModelStudentIDNameConnection {
  items: [StudentIDName]!
  nextToken: String
}

input ModelStudentIDNameFilterInput {
  UMBCID: ModelIDInput
  studentName: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelStudentIDNameFilterInput]
  or: [ModelStudentIDNameFilterInput]
  not: ModelStudentIDNameFilterInput
}

input ModelStudentIDNameConditionInput {
  UMBCID: ModelIDInput
  studentName: ModelStringInput
  and: [ModelStudentIDNameConditionInput]
  or: [ModelStudentIDNameConditionInput]
  not: ModelStudentIDNameConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateStudentIDNameInput {
  UMBCID: ID!
  studentName: String!
  id: ID
}

input UpdateStudentIDNameInput {
  UMBCID: ID
  studentName: String
  id: ID!
}

input DeleteStudentIDNameInput {
  id: ID!
}

input ModelSubscriptionStudentIDNameFilterInput {
  UMBCID: ModelSubscriptionIDInput
  studentName: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionStudentIDNameFilterInput]
  or: [ModelSubscriptionStudentIDNameFilterInput]
}

type ModelBarcodeConnection {
  items: [Barcode]!
  nextToken: String
}

input ModelBarcodeFilterInput {
  UMBCID: ModelIDInput
  barcode: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelBarcodeFilterInput]
  or: [ModelBarcodeFilterInput]
  not: ModelBarcodeFilterInput
}

input ModelBarcodeConditionInput {
  UMBCID: ModelIDInput
  barcode: ModelStringInput
  and: [ModelBarcodeConditionInput]
  or: [ModelBarcodeConditionInput]
  not: ModelBarcodeConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateBarcodeInput {
  UMBCID: ID!
  barcode: String!
  id: ID
}

input UpdateBarcodeInput {
  UMBCID: ID
  barcode: String
  id: ID!
}

input DeleteBarcodeInput {
  id: ID!
}

input ModelSubscriptionBarcodeFilterInput {
  UMBCID: ModelSubscriptionIDInput
  barcode: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionBarcodeFilterInput]
  or: [ModelSubscriptionBarcodeFilterInput]
}

type ModelGradeConnection {
  items: [Grade]!
  nextToken: String
}

input ModelGradeFilterInput {
  UMBCID: ModelIDInput
  barcode: ModelStringInput
  grade: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelGradeFilterInput]
  or: [ModelGradeFilterInput]
  not: ModelGradeFilterInput
}

input ModelGradeConditionInput {
  UMBCID: ModelIDInput
  barcode: ModelStringInput
  grade: ModelStringInput
  and: [ModelGradeConditionInput]
  or: [ModelGradeConditionInput]
  not: ModelGradeConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateGradeInput {
  UMBCID: ID!
  barcode: String!
  grade: String
  id: ID
}

input UpdateGradeInput {
  UMBCID: ID
  barcode: String
  grade: String
  id: ID!
}

input DeleteGradeInput {
  id: ID!
}

input ModelSubscriptionGradeFilterInput {
  UMBCID: ModelSubscriptionIDInput
  barcode: ModelSubscriptionStringInput
  grade: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionGradeFilterInput]
  or: [ModelSubscriptionGradeFilterInput]
}
